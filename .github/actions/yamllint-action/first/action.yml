name: Lint YAML using yamllint
description: |
  This action lint for YAML files using [yamllint][yamllint].

  > [!NOTE]
  > A linter for YAML files.
  > yamllint does not only check for syntax validity,
  > but for weirdnesses like key repetition and cosmetic problems such as lines length, trailing spaces, indentation, etc.

  ## Usage

  You should create a YAML file to define your configuration.
  See details configuration syntax for yamllint in [yamllint][yamllint].

  ### Configuration Path

  ```yaml
    steps:
      - name: Yamllint
        uses: tmknom/yamllint-action@v0
        with:
          configuration-path: .yamllint.yml
  ```

inputs:
  configuration-path:
    required: false
    description: The path for the yamllint configurations.

runs:
  using: composite

  steps:
    - name: Start log group (Prepare)
      run: echo "::group::Prepare yamllint"
      shell: bash

    - name: Validate configuration
      id: config
      env:
        CONFIG_PATH: ${{ inputs.configuration-path }}
        DEFAULT_CONFIG_PATH: .yamllint.yml
      run: |
        set -x
        if [[ "${CONFIG_PATH}" != "" && -f "${CONFIG_PATH}" ]]; then
          valid="${CONFIG_PATH}"
        elif [[ -f "${DEFAULT_CONFIG_PATH}" ]]; then
          valid="${DEFAULT_CONFIG_PATH}"
        else
          title="not found configuration file"
          detail="recommend specifying valid configuration-path"
          echo "::warning:: ${title}: ${detail}"
        fi
        echo "path=${valid}" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Show configuration
      if: ${{ steps.config.outputs.path != '' }}
      env:
        CONFIG_PATH: ${{ steps.config.outputs.path }}
      run: |
        set -x
        cat "${CONFIG_PATH}"
      shell: bash

    - name: Prepare options
      id: prepare
      env:
        CONFIG_PATH: ${{ steps.config.outputs.path }}
      run: |
        set -x
        options=(--strict --format github)
        if [[ "${CONFIG_PATH}" != "" ]]; then
          options+=(--config-file "${CONFIG_PATH}")
        fi
        echo "options=${options[*]}" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: End log group (Prepare)
      run: echo "::endgroup::"
      shell: bash

    - name: Start log group (Run)
      run: echo "::group::Run yamllint"
      shell: bash

    - name: Run yamllint
      env:
        OPTIONS: ${{ steps.prepare.outputs.options }}
      run: |
        set -x
        yamllint "${OPTIONS[@]}" .
      shell: bash

    - name: End log group (Run)
      run: echo "::endgroup::"
      shell: bash
