name: Determine Version Level
description: |
  Automatically determines the version bump level (`minor`, `patch`, or `none`)
  from labels on merged pull requests since the last Git tag.

  ## Usage

  ```yaml
    steps:
      - name: Determine Version Level
        uses: tmknom/determine-version-level-action@v0
  ```

inputs:
  revision-range:
    required: false
    description: Git revision range (e.g., v1.0.0..main) used to filter merged pull requests.

outputs:
  bump-level:
    value: ${{ steps.determine.outputs.level || 'none' }}
    description: The determined version bump level (`minor`, `patch`, or `none`).

runs:
  using: composite

  steps:
    - name: Git tag version
      id: tag
      if: ${{ inputs.revision-range == '' }}
      run: |
        echo "::group::Git tag version"
        set -x
        git fetch --tags
        tag="$(git tag --sort=-v:refname | head -1)"
        echo "version=${tag}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Generate revision range
      id: generate
      env:
        CURRENT_VERSION: ${{ steps.tag.outputs.version }}
        DEFAULT_BRANCH: origin/${{ github.event.repository.default_branch }}
        REVISION_RANGE: ${{ inputs.revision-range }}
      run: |
        echo "::group::Generate revision range"
        set -x
        if [[ "${REVISION_RANGE}" != "" ]]; then
          echo "range=${REVISION_RANGE}" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        range="${DEFAULT_BRANCH}"
        if [[ "${CURRENT_VERSION}" != "" ]]; then
          range="${CURRENT_VERSION}..${DEFAULT_BRANCH}"
        fi
        echo "range=${range}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Filter pull requests
      id: filter
      env:
        RANGE: ${{ steps.generate.outputs.range }}
      run: |
        echo "::group::Filter pull requests"
        set -x
        commits="$(git log "${RANGE}" --merges --pretty='format:%s')"
        numbers="$(grep -oE '#[0-9]+' <<<"${commits}" | sed 's/#//g' | sort -u | tr '\n' ' ' | sed 's/[[:space:]]\+$//' || true)"
        echo "pull-requests=${numbers}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Determine version level
      id: determine
      if: ${{ steps.filter.outputs.pull-requests != '' }}
      env:
        PULL_REQUESTS: ${{ steps.filter.outputs.pull-requests }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Determine version level"
        set -x
        IFS=$' ' read -ra prs <<<"${PULL_REQUESTS}"
        query="$(printf ' OR %s' "${prs[@]}")"
        labels="$(gh pr list --search "${query:4}" --limit 100 --state merged --json labels --jq '.[].labels[].name' | sort -u)"

        if grep -Eqx "enhancement" <<<"${labels}"; then
          level="minor"
        elif grep -Eqx "bug|dependencies" <<<"${labels}"; then
          level="patch"
        fi
        echo "level=${level}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash
