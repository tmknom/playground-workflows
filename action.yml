name: Determine Version Level
description: |
  Automatically determines the version bump level (`minor`, `patch`, or `none`)
  from labels on merged pull requests since the last Git tag.

  ## Usage

  ```yaml
    steps:
      - name: Determine Version Level
        uses: tmknom/determine-version-level-action@v0
  ```

outputs:
  bump-level:
    value: ${{ steps.determine.outputs.level }}
    description: The determined version bump level (`minor`, `patch`, or `none`).

runs:
  using: composite

  steps:
    - name: Git tag version
      id: tag
      run: |
        echo "::group::Git tag version"
        set -x
        git fetch --tags
        tag="$(git tag --sort=-v:refname | head -1)"
        echo "version=${tag}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Determine version level
      id: determine
      env:
        CURRENT_VERSION: ${{ steps.tag.outputs.version }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Determine version level"
        set -x
        range="origin/${DEFAULT_BRANCH}"
        if [[ "${CURRENT_VERSION}" != "" ]]; then
          range="${CURRENT_VERSION}..origin/${DEFAULT_BRANCH}"
        fi

        messages="$(git log "${range}" --merges --pretty='format:%s')"
        numbers=$(grep -oE '#[0-9]+' <<<"${messages}" | sed 's/#//g' | sort -u || true)

        level="none"
        if [[ "${numbers}" == "" ]]; then
          echo "level=${level}" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        mapfile -t prs <<<"${numbers}"
        for pr in "${prs[@]}"; do
          labels="$(gh pr view "${pr}" --json labels --jq '.labels[].name')"
          if grep -Eqx "enhancement" <<<"${labels}"; then
            level="minor"
            break
          elif grep -Eqx "bug|dependencies" <<<"${labels}"; then
            level="patch"
            # Note: Do not break; a higher-priority label may still appear.
          fi
        done
        echo "level=${level}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash
